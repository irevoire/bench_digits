#![feature(int_log)]

pub fn log10(i: usize) -> usize {
    ((i + 1) as f64).log10().ceil() as usize
}

pub fn divide_loop(n: usize) -> usize {
    std::iter::successors(Some(n), |n| {
        let n = n / 10;
        (n != 0).then(|| n)
    })
    .count()
}

pub fn kendal_willets(n: usize) -> usize {
    const LOOKUP: [u128; 6 * 5 + 2] = [
        4294967296,
        8589934582,
        8589934582,
        8589934582,
        12884901788,
        12884901788,
        12884901788,
        17179868184,
        17179868184,
        17179868184,
        21474826480,
        21474826480,
        21474826480,
        21474826480,
        25769703776,
        25769703776,
        25769703776,
        30063771072,
        30063771072,
        30063771072,
        34349738368,
        34349738368,
        34349738368,
        34349738368,
        38554705664,
        38554705664,
        38554705664,
        41949672960,
        41949672960,
        41949672960,
        42949672960,
        42949672960,
    ];
    let n = n as u128;
    return ((n + LOOKUP[n.log2() as usize]) >> 32) as usize;
}
